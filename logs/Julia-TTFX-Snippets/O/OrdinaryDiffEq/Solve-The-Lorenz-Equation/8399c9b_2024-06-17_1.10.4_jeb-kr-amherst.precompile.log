Precompiling project...
  ✓ DataValueInterfaces
  ✓ Reexport
  ✓ SimpleUnPack
  ✓ OpenLibm_jll
  ✓ SIMDTypes
  ✓ ConcreteStructs
  ✓ MuladdMacro
  ✓ UnPack
  ✓ EnumX
  ✓ Requires
  ✓ Compat
  ✓ OrderedCollections
  ✓ CpuId
  ✓ FunctionWrappers
  ✓ CommonSolve
  ✓ Zlib_jll
  ✓ IfElse
  ✓ NaNMath
  ✓ FillArrays
  ✓ GenericSchur
  ✓ EnzymeCore
  ✓ IteratorInterfaceExtensions
  ✓ Inflate
  ✓ ConstructionBase
  ✓ Tricks
  ✓ DataAPI
  ✓ DocStringExtensions
  ✓ PackageExtensionCompat
  ✓ LazyArtifacts
  ✓ CompilerSupportLibraries_jll
  ✓ FastClosures
  ✓ CompositionsBase
  ✓ SuiteSparse_jll
  ✓ ADTypes
  ✓ IrrationalConstants
  ✓ StaticArraysCore
  ✓ ManualMemory
  ✓ ExprTools
  ✓ Compat → CompatLinearAlgebraExt
  ✓ Preferences
  ✓ Adapt
  ✓ FunctionWrappersWrappers
  ✓ Parameters
  ✓ TableTraits
  ✓ ADTypes → ADTypesEnzymeCoreExt
  ✓ DiffResults
  ✓ OffsetArrays
  ✓ LogExpFunctions
  ✓ Static
  ✓ FastLapackInterface
  ✓ RuntimeGeneratedFunctions
  ✓ PrecompileTools
  ✓ EnzymeCore → AdaptExt
  ✓ JLLWrappers
  ✓ OffsetArrays → OffsetArraysAdaptExt
  ✓ BitTwiddlingConvenienceFunctions
  ✓ ThreadingUtilities
  ✓ Distributed
  ✓ Tables
  ✓ IntelOpenMP_jll
  ✓ oneTBB_jll
  ✓ ChainRulesCore
  ✓ SharedArrays
  ✓ OpenSpecFun_jll
  ✓ MacroTools
  ✓ DataStructures
  ✓ HostCPUFeatures
  ✓ CPUSummary
  ✓ ADTypes → ADTypesChainRulesCoreExt
  ✓ TimerOutputs
  ✓ MKL_jll
  ✓ TruncatedStacktraces
  ✓ Test
  ✓ RecipesBase
  ✓ SimpleTraits
  ✓ PolyesterWeave
  ✓ CommonSubexpressions
  ✓ InverseFunctions
  ✓ LogExpFunctions → LogExpFunctionsChainRulesCoreExt
  ✓ InverseFunctions → DatesExt
  ✓ SparseArrays
  ✓ CompositionsBase → CompositionsBaseInverseFunctionsExt
  ✓ LogExpFunctions → LogExpFunctionsInverseFunctionsExt
  ✓ SuiteSparse
  ✓ Statistics
  ✓ SparseMatrixColorings
  ✓ ChainRulesCore → ChainRulesCoreSparseArraysExt
  ✓ FillArrays → FillArraysSparseArraysExt
  ✓ KLU
  ✓ Sparspak
  ✓ FillArrays → FillArraysStatisticsExt
  ✓ DifferentiationInterface
  ✓ SpecialFunctions
  ✓ SpecialFunctions → SpecialFunctionsChainRulesCoreExt
  ✓ StaticArrays
  ✓ DiffRules
  ✓ Adapt → AdaptStaticArraysExt
  ✓ ConstructionBase → ConstructionBaseStaticArraysExt
  ✓ StaticArrays → StaticArraysStatisticsExt
  ✓ GPUArraysCore
  ✓ ArrayInterface
  ✓ StaticArrays → StaticArraysChainRulesCoreExt
  ✓ Setfield
  ✓ Krylov
  ✓ ArrayInterface → ArrayInterfaceGPUArraysCoreExt
  ✓ ArrayInterface → ArrayInterfaceStaticArraysCoreExt
  ✓ Accessors
  ✓ ArnoldiMethod
  ✓ SciMLStructures
  ✓ FiniteDiff
  ✓ Accessors → AccessorsStaticArraysExt
  ✓ MaybeInplace
  ✓ ForwardDiff
  ✓ SciMLOperators
  ✓ FiniteDiff → FiniteDiffStaticArraysExt
  ✓ StaticArrayInterface
  ✓ ForwardDiff → ForwardDiffStaticArraysExt
  ✓ SymbolicIndexingInterface
  ✓ DifferentiationInterface → DifferentiationInterfaceForwardDiffExt
  ✓ StaticArrayInterface → StaticArrayInterfaceStaticArraysExt
  ✓ PreallocationTools
  ✓ DifferentiationInterface → DifferentiationInterfaceFiniteDiffExt
  ✓ NLSolversBase
  ✓ StaticArrayInterface → StaticArrayInterfaceOffsetArraysExt
  ✓ DifferentiationInterface → DifferentiationInterfaceChainRulesCoreExt
  ✓ CloseOpenIntervals
  ✓ RecursiveArrayTools
  ✓ LayoutPointers
  ✓ Graphs
  ✓ RecursiveArrayTools → RecursiveArrayToolsForwardDiffExt
  ✓ LineSearches
  ✓ ArrayLayouts
  ✓ VertexSafeGraphs
  ✓ StrideArraysCore
  ✓ ArrayLayouts → ArrayLayoutsSparseArraysExt
  ✓ Polyester
  ✓ SparseDiffTools
  ✓ FastBroadcast
  ✓ LazyArrays
  ✓ RecursiveArrayTools → RecursiveArrayToolsFastBroadcastExt
  ✓ SparseDiffTools → SparseDiffToolsPolyesterExt
  ✓ LazyArrays → LazyArraysStaticArraysExt
  ✓ VectorizationBase
  ✓ SLEEFPirates
  ✓ SciMLBase
  ✓ SciMLBase → SciMLBaseChainRulesCoreExt
  ✓ DiffEqBase
  ✓ DiffEqBase → DiffEqBaseChainRulesCoreExt
  ✓ ExponentialUtilities
  ✓ LoopVectorization
  ✓ LoopVectorization → SpecialFunctionsExt
  ✓ LoopVectorization → ForwardDiffExt
  ✓ TriangularSolve
  ✓ RecursiveFactorization
  ✓ SimpleNonlinearSolve
  ✓ SimpleNonlinearSolve → SimpleNonlinearSolveChainRulesCoreExt
  ✓ LinearSolve
  ✓ LinearSolve → LinearSolveRecursiveArrayToolsExt
  ✓ NonlinearSolve
  ✓ OrdinaryDiffEq
  160 dependencies successfully precompiled in 135 seconds
	Command being timed: "julia +1.10.4 --project=O/OrdinaryDiffEq/Solve-The-Lorenz-Equation -e using Pkg; @time @eval Pkg.precompile()"
	User time (seconds): 346.95
	System time (seconds): 32.61
	Percent of CPU this job got: 279%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 2:15.71
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1360976
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 569
	Minor (reclaiming a frame) page faults: 8450755
	Voluntary context switches: 207822
	Involuntary context switches: 60560
	Swaps: 0
	File system inputs: 0
	File system outputs: 1239192
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
